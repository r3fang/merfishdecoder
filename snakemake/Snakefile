rule all:
	input:
		expand("{analysisPath}/logs/create_analysis.log", 
			analysisPath = config["global"]["analysisPath"]),
				
		expand("{analysisPath}/logs/fov_{fov}_zpos_{zpos}_decoding.log", 
			analysisPath = config["global"]["analysisPath"], 
			fov = range(config["global"]["fovs"]), 
			zpos = config["global"]["zposes"]),
		
		expand("{analysisPath}/logs/export_barcodes.log", 
			analysisPath = config["global"]["analysisPath"]),
		
		expand("{analysisPath}/logs/export_features_polyT.log",
			analysisPath = config["global"]["analysisPath"]),

		expand("{analysisPath}/logs/export_features_DAPI.log", 
			analysisPath = config["global"]["analysisPath"]),

		expand("{analysisPath}/logs/filter_features_polyT.log", 
			analysisPath = config["global"]["analysisPath"]),

		expand("{analysisPath}/logs/filter_features_DAPI.log", 
			analysisPath = config["global"]["analysisPath"]),

		expand("{analysisPath}/logs/filter_barcodes.log", 
			analysisPath = config["global"]["analysisPath"]),

		expand("{analysisPath}/logs/assign_barcodes_DAPI.log", 
			analysisPath = config["global"]["analysisPath"]),

		expand("{analysisPath}/logs/assign_barcodes_polyT.log", 
			analysisPath = config["global"]["analysisPath"]),

		expand("{analysisPath}/logs/assign_barcodes_DAPI_filter.log", 
			analysisPath = config["global"]["analysisPath"]),

		expand("{analysisPath}/logs/assign_barcodes_polyT_filter.log", 
			analysisPath = config["global"]["analysisPath"]),
		
		expand("{analysisPath}/logs/export_gene_DAPI_matrix.log", 
			analysisPath = config["global"]["analysisPath"]),

		expand("{analysisPath}/logs/export_gene_polyT_matrix.log", 
			analysisPath = config["global"]["analysisPath"])

rule createAnalysis:
	params:
		dataHome = config["global"]["dataHome"],
		analysisHome = config["global"]["analysisHome"],
		dataSetName = config["global"]["dataSetName"],
		codebookName = config["global"]["codebookName"],
		dataOrganizationName = config["global"]["dataOrganizationName"],
		microscopeParameterName = config["global"]["microscopeParameterName"],
		microscopeChromaticAberrationName = config["global"]["microscopeChromaticAberrationName"],
		positionName = config["global"]["positionName"]
	
	output:
		"{analysisPath}/logs/create_analysis.log"
	
	resources: 
		mem=10000, cpus=1
	
	shell:
		"""
		python /home/rfang/github/merfishdecoder/bin/merfishdecoder create-analysis \
			--data-set-name={params.dataSetName} \
			--codebook-name={params.codebookName} \
			--data-organization-name={params.dataOrganizationName} \
			--microscope-parameter-name={params.microscopeParameterName} \
			--microscope-chromatic-aberration-name={params.microscopeChromaticAberrationName} \
			--position-name={params.positionName} \
			--data-home={params.dataHome} \
			--analysis-home={params.analysisHome} \
			> {output}
		"""

rule registration:
	input:
		"{analysisPath}/logs/create_analysis.log"
	
	params:
		dataSetName = config["global"]["dataSetName"],
		registerDrift = config["registration"]["registerDrift"],
		refFrameIndex = config["registration"]["refFrameIndex"],
		highPassFilterSigma = config["registration"]["highPassFilterSigma"],
		registerColor = config["registration"]["registerColor"],
		saveFiducials = config["registration"]["saveFiducials"]
	
	output:
		zpos1 = "{analysisPath}/logs/fov_{fov}_zpos_1.0_registration.log",
		zpos2 = "{analysisPath}/logs/fov_{fov}_zpos_2.0_registration.log",
		zpos3 = "{analysisPath}/logs/fov_{fov}_zpos_3.0_registration.log",
		zpos4 = "{analysisPath}/logs/fov_{fov}_zpos_4.0_registration.log",
		zpos5 = "{analysisPath}/logs/fov_{fov}_zpos_5.0_registration.log",
		zpos6 = "{analysisPath}/logs/fov_{fov}_zpos_6.0_registration.log"
		
	shell:
		"""
		python /home/rfang/github/merfishdecoder/bin/merfishdecoder register-images \
			--data-set-name={params.dataSetName} \
			--fov={wildcards.fov} \
			--zpos=1.0  \
			--output-name={wildcards.analysisPath}/warpedImages/fov_{wildcards.fov}_zpos_1.0.tif \
			--register-drift={params.registerDrift} \
			--ref-frame-index={params.refFrameIndex} \
			--high-pass-filter-sigma={params.highPassFilterSigma} \
			--register-color={params.registerColor} \
			--save-fiducials={params.saveFiducials} \
			> {output.zpos1}
		python /home/rfang/github/merfishdecoder/bin/merfishdecoder register-images \
			--data-set-name={params.dataSetName} \
			--fov={wildcards.fov} \
			--zpos=2.0 \
			--output-name={wildcards.analysisPath}/warpedImages/fov_{wildcards.fov}_zpos_2.0.tif \
			--register-drift={params.registerDrift} \
			--ref-frame-index={params.refFrameIndex} \
			--high-pass-filter-sigma={params.highPassFilterSigma} \
			--register-color={params.registerColor} \
			--save-fiducials={params.saveFiducials} \
			> {output.zpos2}
		python /home/rfang/github/merfishdecoder/bin/merfishdecoder register-images \
			--data-set-name={params.dataSetName} \
			--fov={wildcards.fov} \
			--zpos=3.0  \
			--output-name={wildcards.analysisPath}/warpedImages/fov_{wildcards.fov}_zpos_3.0.tif \
			--register-drift={params.registerDrift} \
			--ref-frame-index={params.refFrameIndex} \
			--high-pass-filter-sigma={params.highPassFilterSigma} \
			--register-color={params.registerColor} \
			--save-fiducials={params.saveFiducials} \
			> {output.zpos3}
		python /home/rfang/github/merfishdecoder/bin/merfishdecoder register-images \
			--data-set-name={params.dataSetName} \
			--fov={wildcards.fov} \
			--zpos=4.0  \
			--output-name={wildcards.analysisPath}/warpedImages/fov_{wildcards.fov}_zpos_4.0.tif \
			--register-drift={params.registerDrift} \
			--ref-frame-index={params.refFrameIndex} \
			--high-pass-filter-sigma={params.highPassFilterSigma} \
			--register-color={params.registerColor} \
			--save-fiducials={params.saveFiducials} \
			> {output.zpos4}
		python /home/rfang/github/merfishdecoder/bin/merfishdecoder register-images \
			--data-set-name={params.dataSetName} \
			--fov={wildcards.fov} \
			--zpos=5.0  \
			--output-name={wildcards.analysisPath}/warpedImages/fov_{wildcards.fov}_zpos_5.0.tif \
			--register-drift={params.registerDrift} \
			--ref-frame-index={params.refFrameIndex} \
			--high-pass-filter-sigma={params.highPassFilterSigma} \
			--register-color={params.registerColor} \
			--save-fiducials={params.saveFiducials} \
			> {output.zpos5}
		python /home/rfang/github/merfishdecoder/bin/merfishdecoder register-images \
			--data-set-name={params.dataSetName} \
			--fov={wildcards.fov} \
			--zpos=6.0  \
			--output-name={wildcards.analysisPath}/warpedImages/fov_{wildcards.fov}_zpos_6.0.tif \
			--register-drift={params.registerDrift} \
			--ref-frame-index={params.refFrameIndex} \
			--high-pass-filter-sigma={params.highPassFilterSigma} \
			--register-color={params.registerColor} \
			--save-fiducials={params.saveFiducials} \
			> {output.zpos6}
		"""

rule segmentation_DAPI:
	input:
		"{analysisPath}/logs/fov_{fov}_zpos_{zpos}_registration.log"
	
	params:
		dataSetName = config["global"]["dataSetName"],
		diameter = config["segmentation"]["DAPI"]["diameter"],
		modelType = config["segmentation"]["DAPI"]["modelType"],
		gpu = config["segmentation"]["DAPI"]["gpu"]
	
	output:
		seg = "{analysisPath}/logs/fov_{fov}_zpos_{zpos}_DAPI_segmentation.log",
		feature = "{analysisPath}/logs/fov_{fov}_zpos_{zpos}_DAPI_extract_features.log"
	
	shell:
		"""
		python /home/rfang/github/merfishdecoder/bin/merfishdecoder segmentation \
			--data-set-name={params.dataSetName} \
			--fov={wildcards.fov} \
			--zpos={wildcards.zpos} \
			--warped-images-name={wildcards.analysisPath}/warpedImages/fov_{wildcards.fov}_zpos_{wildcards.zpos}.tif \
			--feature-name=DAPI \
			--output-name={wildcards.analysisPath}/segmentedImages/fov_{wildcards.fov}_zpos_{wildcards.zpos}_DAPI.npz \
			--diameter={params.diameter} \
			--model-type={params.modelType} \
			--gpu={params.gpu}  \
			> {output.seg}
		python /home/rfang/github/merfishdecoder/bin/merfishdecoder extract-features \
			--data-set-name={params.dataSetName} \
			--fov={wildcards.fov} \
			--zpos={wildcards.zpos} \
			--segmented-images-name={wildcards.analysisPath}/segmentedImages/fov_{wildcards.fov}_zpos_{wildcards.zpos}_DAPI.npz \
			--output-name={wildcards.analysisPath}/extractedFeatures/fov_{wildcards.fov}_zpos_{wildcards.zpos}_DAPI \
			> {output.feature}
		rm {wildcards.analysisPath}/segmentedImages/fov_{wildcards.fov}_zpos_{wildcards.zpos}_DAPI.npz
		"""

rule segmentation_polyT:
	input:
		"{analysisPath}/logs/fov_{fov}_zpos_{zpos}_registration.log"
	
	params:
		dataSetName = config["global"]["dataSetName"],
		diameter = config["segmentation"]["polyT"]["diameter"],
		modelType = config["segmentation"]["polyT"]["modelType"],
		gpu = config["segmentation"]["polyT"]["gpu"]
	
	output:
		seg = "{analysisPath}/logs/fov_{fov}_zpos_{zpos}_polyT_segmentation.log",
		feature = "{analysisPath}/logs/fov_{fov}_zpos_{zpos}_polyT_extract_features.log"
	
	shell:
		"""
		python /home/rfang/github/merfishdecoder/bin/merfishdecoder segmentation \
			--data-set-name={params.dataSetName} \
			--fov={wildcards.fov} \
			--zpos={wildcards.zpos} \
			--warped-images-name={wildcards.analysisPath}/warpedImages/fov_{wildcards.fov}_zpos_{wildcards.zpos}.tif \
			--feature-name=DAPI \
			--output-name={wildcards.analysisPath}/segmentedImages/fov_{wildcards.fov}_zpos_{wildcards.zpos}_polyT.npz \
			--diameter={params.diameter} \
			--model-type={params.modelType} \
			--gpu={params.gpu}  \
			> {output.seg}
		python /home/rfang/github/merfishdecoder/bin/merfishdecoder extract-features \
			--data-set-name={params.dataSetName} \
			--fov={wildcards.fov} \
			--zpos={wildcards.zpos} \
			--segmented-images-name={wildcards.analysisPath}/segmentedImages/fov_{wildcards.fov}_zpos_{wildcards.zpos}_polyT.npz \
			--output-name={wildcards.analysisPath}/extractedFeatures/fov_{wildcards.fov}_zpos_{wildcards.zpos}_polyT \
			> {output.feature}
		rm {wildcards.analysisPath}/segmentedImages/fov_{wildcards.fov}_zpos_{wildcards.zpos}_polyT.npz
		"""

rule preprocessing:
	input:
		"{analysisPath}/logs/fov_{fov}_zpos_{zpos}_registration.log",
		expand("{analysisPath}/logs/fov_{fov}_zpos_{zpos}_polyT_segmentation.log", 
			analysisPath = config["global"]["analysisPath"], 
			fov = range(config["global"]["fovs"]), 
			zpos = config["global"]["zposes"]),
		expand("{analysisPath}/logs/fov_{fov}_zpos_{zpos}_DAPI_segmentation.log", 
			analysisPath = config["global"]["analysisPath"], 
			fov = range(config["global"]["fovs"]), 
			zpos = config["global"]["zposes"])
	params:
		dataSetName = config["global"]["dataSetName"],
		highPassFilterSigma = config["pre"]["highPassFilterSigma"]
	
	output:
		"{analysisPath}/logs/fov_{fov}_zpos_{zpos}_processing.log"
			
	shell:
		"""
		python /home/rfang/github/merfishdecoder/bin/merfishdecoder process-images \
			--data-set-name={params.dataSetName} \
			--fov={wildcards.fov} --zpos={wildcards.zpos} \
			--warped-images-name={wildcards.analysisPath}/warpedImages/fov_{wildcards.fov}_zpos_{wildcards.zpos}.tif \
			--output-name={wildcards.analysisPath}/processedImages/fov_{wildcards.fov}_zpos_{wildcards.zpos}.npz \
			--high-pass-filter-sigma={params.highPassFilterSigma} \
			> {output}
		rm {wildcards.analysisPath}/warpedImages/fov_{wildcards.fov}_zpos_{wildcards.zpos}.tif
		"""

rule decoding:
	input:
		"{analysisPath}/logs/fov_{fov}_zpos_{zpos}_processing.log"
	
	params:
		dataSetName = config["global"]["dataSetName"],
		borderSize = config["decoding"]["borderSize"],
		magnitudeThreshold = config["decoding"]["magnitudeThreshold"],
		distanceThreshold = config["decoding"]["distanceThreshold"]
	
	output:
		"{analysisPath}/logs/fov_{fov}_zpos_{zpos}_decoding.log"
	
	shell:
		"""
		python /home/rfang/github/merfishdecoder/bin/merfishdecoder decode-images \
			--data-set-name={params.dataSetName} \
			--fov={wildcards.fov} \
			--zpos={wildcards.zpos} \
			--decoding-images-name={wildcards.analysisPath}/processedImages/fov_{wildcards.fov}_zpos_{wildcards.zpos}.npz \
			--output-name={wildcards.analysisPath}/decodedImages/fov_{wildcards.fov}_zpos_{wildcards.zpos}.npz \
			--border-size={params.borderSize} \
			--magnitude-threshold={params.magnitudeThreshold} \
			--distance-threshold={params.distanceThreshold} \
			> {output}
		rm {wildcards.analysisPath}/processedImages/fov_{wildcards.fov}_zpos_{wildcards.zpos}.npz
		"""

rule trainPSM:
	input:
		expand("{analysisPath}/logs/fov_{fov}_zpos_{zpos}_decoding.log", 
			analysisPath = config["global"]["analysisPath"], 
			fov = range(config["global"]["fovs"]), 
			zpos = config["global"]["zposes"])
	
	params:
		dataSetName = config["global"]["dataSetName"],
		zposNum = config["trainPSM"]["zposNum"]
	
	output:
		"{analysisPath}/logs/train_PSM.log"
	
	shell:
		"""
		python /home/rfang/github/merfishdecoder/bin/merfishdecoder \
			train-psm --data-set-name={params.dataSetName} \
			--decoded-images-dir={wildcards.analysisPath}/decodedImages \
			--output-name={wildcards.analysisPath}/pixel_score_machine.pkl \
			--zpos-num={params.zposNum} \
			> {output}
		"""

rule extractBarcodes:
	input:
		"{analysisPath}/logs/fov_{fov}_zpos_{zpos}_decoding.log",
		"{analysisPath}/logs/train_PSM.log"
	
	params:
		dataSetName = config["global"]["dataSetName"],
		maxCores = config["extractBarcodes"]["maxCores"],
		barcodesPerCore = config["extractBarcodes"]["barcodesPerCore"]
	
	output:
		"{analysisPath}/logs/fov_{fov}_zpos_{zpos}_extract_barcodes.log"
	
	shell:
		"""
		python /home/rfang/github/merfishdecoder/bin/merfishdecoder extract-barcodes \
			--data-set-name={params.dataSetName} \
			--fov={wildcards.fov} \
			--zpos={wildcards.zpos} \
			--decoded-images-name={wildcards.analysisPath}/decodedImages/fov_{wildcards.fov}_zpos_{wildcards.zpos}.npz \
			--output-name={wildcards.analysisPath}/extractedBarcodes/fov_{wildcards.fov}_zpos_{wildcards.zpos}.h5 \
			--psm-name={wildcards.analysisPath}/pixel_score_machine.pkl \
			--barcodes-per-core={params.barcodesPerCore} \
			--max-cores={params.maxCores} \
			> {output}
		rm {wildcards.analysisPath}/decodedImages/fov_{wildcards.fov}_zpos_{wildcards.zpos}.npz
		"""

rule exportBarcodes:
	input:
		expand("{analysisPath}/logs/fov_{fov}_zpos_{zpos}_extract_barcodes.log", 
			analysisPath = config["global"]["analysisPath"], 
			fov = range(config["global"]["fovs"]), 
			zpos = config["global"]["zposes"])

	params:
		dataSetName = config["global"]["dataSetName"]

	output:
		"{analysisPath}/logs/export_barcodes.log"

	shell:
		"""
		python /home/rfang/github/merfishdecoder/bin/merfishdecoder export-barcodes \
			--data-set-name={params.dataSetName} \
			--decoded-barcodes-name {wildcards.analysisPath}/extractedBarcodes/*.h5 \
			--output-name={wildcards.analysisPath}/exportedBarcodes/barcodes.h5 \
			> {output}
		"""

rule exportFeatures:
	input:
		expand("{analysisPath}/logs/fov_{fov}_zpos_{zpos}_DAPI_extract_features.log", 
			analysisPath = config["global"]["analysisPath"], 
			fov = range(config["global"]["fovs"]), 
			zpos = config["global"]["zposes"]),
		expand("{analysisPath}/logs/fov_{fov}_zpos_{zpos}_polyT_extract_features.log", 
			analysisPath = config["global"]["analysisPath"], 
			fov = range(config["global"]["fovs"]), 
			zpos = config["global"]["zposes"])
	params:
		dataSetName = config["global"]["dataSetName"],
		bufferSize = config["exportFeatures"]["bufferSize"]

	output:
		DAPI = "{analysisPath}/logs/export_features_DAPI.log",
		polyT = "{analysisPath}/logs/export_features_polyT.log"

	shell:
		"""
		python /home/rfang/github/merfishdecoder/bin/merfishdecoder export-features \
			--data-set-name={params.dataSetName} \
			--segmented-features-name {wildcards.analysisPath}/extractedFeatures/*_DAPI \
			--output-name={wildcards.analysisPath}/exportedFeatures/DAPI \
			--buffer-size={params.bufferSize} \
			> {output.DAPI}
		python /home/rfang/github/merfishdecoder/bin/merfishdecoder export-features \
			--data-set-name={params.dataSetName} \
			--segmented-features-name {wildcards.analysisPath}/extractedFeatures/*_polyT \
			--output-name={wildcards.analysisPath}/exportedFeatures/polyT \
			--buffer-size={params.bufferSize} \
			> {output.polyT}
		"""

rule filterFeatures:
	input:
		"{analysisPath}/logs/export_features_DAPI.log",
		"{analysisPath}/logs/export_features_polyT.log"
	
	params:
		dataSetName = config["global"]["dataSetName"],
		borderSize = config["filterFeatures"]["borderSize"],
		minZplane = config["filterFeatures"]["minZplane"]

	output:
		DAPI  = "{analysisPath}/logs/filter_features_DAPI.log",
		polyT = "{analysisPath}/logs/filter_features_polyT.log"
	
	shell:
		"""
		python /home/rfang/github/merfishdecoder/bin/merfishdecoder filter-features \
			--data-set-name={params.dataSetName} \
			--exported-features-name={wildcards.analysisPath}/exportedFeatures/DAPI \
			--output-name={wildcards.analysisPath}/filteredFeatures/DAPI \
			--border-size={params.borderSize} \
			--min-zplane={params.minZplane} \
			> {output.DAPI}
		python /home/rfang/github/merfishdecoder/bin/merfishdecoder filter-features \
			--data-set-name={params.dataSetName} \
			--exported-features-name={wildcards.analysisPath}/exportedFeatures/polyT \
			--output-name={wildcards.analysisPath}/filteredFeatures/polyT \
			--border-size={params.borderSize} \
			--min-zplane={params.minZplane} \
			> {output.polyT}
		"""

rule filterBarcodes:
	input:
		"{analysisPath}/logs/export_barcodes.log",
	
	params:
		dataSetName = config["global"]["dataSetName"],
		fovNum = config["filterBarcodes"]["fovNum"],
		keepBlankBarcodes = config["filterBarcodes"]["keepBlankBarcodes"],
		misIdentificationRate = config["filterBarcodes"]["misIdentificationRate"],
		minAreaSize = config["filterBarcodes"]["minAreaSize"]

	output:
		"{analysisPath}/logs/filter_barcodes.log"
		
	shell:
		"""
		python /home/rfang/github/merfishdecoder/bin/merfishdecoder filter-barcodes \
			--data-set-name={params.dataSetName} \
			--exported-barcodes-name={wildcards.analysisPath}/exportedBarcodes/barcodes.h5 \
			--output-name={wildcards.analysisPath}/filteredBarcodes/barcodes.h5 \
			--fov-num={params.fovNum} \
			--keep-blank-barcodes={params.keepBlankBarcodes} \
			--mis-identification-rate={params.misIdentificationRate} \
			--min-area-size={params.minAreaSize} \
			> {output}
		"""

rule assignBarcodes_DAPI:
	input:
		"{analysisPath}/logs/filter_barcodes.log",
		"{analysisPath}/logs/filter_features_DAPI.log"
	
	params:
		dataSetName = config["global"]["dataSetName"],
		maxCores = config["assignBarcodes"]["DAPI"]["maxCores"],
		bufferSize = config["assignBarcodes"]["DAPI"]["bufferSize"]

	output:
		"{analysisPath}/logs/assign_barcodes_DAPI.log"
		
	shell:
		"""
		python /home/rfang/github/merfishdecoder/bin/merfishdecoder assign-barcodes \
			--data-set-name={params.dataSetName} \
			--exported-barcodes-name={wildcards.analysisPath}/filteredBarcodes/barcodes.h5 \
			--exported-features-name={wildcards.analysisPath}/filteredFeatures/DAPI \
			--output-name={wildcards.analysisPath}/assignedBarcodes/barcodes_DAPI.h5 \
			--max-cores={params.maxCores} \
			--buffer-size={params.bufferSize}
			> {output}
		"""

rule assignBarcodes_polyT:
	input:
		"{analysisPath}/logs/filter_barcodes.log",
		"{analysisPath}/logs/filter_features_polyT.log"
	
	params:
		dataSetName = config["global"]["dataSetName"],
		maxCores = config["assignBarcodes"]["polyT"]["maxCores"],
		bufferSize = config["assignBarcodes"]["polyT"]["bufferSize"]

	output:
		"{analysisPath}/logs/assign_barcodes_polyT.log"

	shell:
		"""
		python /home/rfang/github/merfishdecoder/bin/merfishdecoder assign-barcodes \
			--data-set-name={params.dataSetName} \
			--exported-barcodes-name={wildcards.analysisPath}/filteredBarcodes/barcodes.h5 \
			--exported-features-name={wildcards.analysisPath}/filteredFeatures/polyT \
			--output-name={wildcards.analysisPath}/assignedBarcodes/barcodes_polyT.h5 \
			--max-cores={params.maxCores} \
			--buffer-size={params.bufferSize}
			> {output}
		"""


rule filterBarcodesFeature:
	input:
		"{analysisPath}/logs/assign_barcodes_polyT.log",
		"{analysisPath}/logs/assign_barcodes_DAPI.log"

	params:
		dataSetName = config["global"]["dataSetName"],
		fovNum = config["filterBarcodes"]["fovNum"],
		keepBlankBarcodes = config["filterBarcodes"]["keepBlankBarcodes"],
		misIdentificationRate = config["filterBarcodes"]["misIdentificationRate"],
		minAreaSize = config["filterBarcodes"]["minAreaSize"]

	output:
		dapi = "{analysisPath}/logs/assign_barcodes_polyT_filter.log",
		poly = "{analysisPath}/logs/assign_barcodes_DAPI_filter.log"
		
	shell:
		"""
		python /home/rfang/github/merfishdecoder/bin/merfishdecoder filter-barcodes \
			--data-set-name={params.dataSetName} \
			--exported-barcodes-name={wildcards.analysisPath}/assignedBarcodes/barcodes_DAPI.h5 \
			--output-name={wildcards.analysisPath}/filteredBarcodes/barcodes_DAPI_filtered.h5 \
			--fov-num={params.fovNum} \
			--keep-blank-barcodes={params.keepBlankBarcodes} \
			--mis-identification-rate={params.misIdentificationRate} \
			--min-area-size={params.minAreaSize} \
			> {output.dapi}
		python /home/rfang/github/merfishdecoder/bin/merfishdecoder filter-barcodes \
			--data-set-name={params.dataSetName} \
			--exported-barcodes-name={wildcards.analysisPath}/assignedBarcodes/barcodes_polyT.h5 \
			--output-name={wildcards.analysisPath}/filteredBarcodes/barcodes_polyT_filtered.h5 \
			--fov-num={params.fovNum} \
			--keep-blank-barcodes={params.keepBlankBarcodes} \
			--mis-identification-rate={params.misIdentificationRate} \
			--min-area-size={params.minAreaSize} \
			> {output.poly}
		"""

rule exportGeneFeatureMatrix:
	input:
		"{analysisPath}/logs/assign_barcodes_polyT.log",
		"{analysisPath}/logs/filter_features_polyT.log",
		"{analysisPath}/logs/assign_barcodes_DAPI.log",
		"{analysisPath}/logs/filter_features_DAPI.log"

	params:
		dataSetName = config["global"]["dataSetName"],
		maxCores = config["exportGeneFeatureMatrix"]["maxCores"],

	output:
		dapi = "{analysisPath}/logs/export_gene_DAPI_matrix.log",
		poly = "{analysisPath}/logs/export_gene_polyT_matrix.log"
		
	shell:
		"""
		python /home/rfang/github/merfishdecoder/bin/merfishdecoder export-gene-feature-matrix \
			--data-set-name={params.dataSetName} \
			--barcodes-name={wildcards.analysisPath}/filteredBarcodes/barcodes_DAPI_filtered.h5 \
			--features-name={wildcards.analysisPath}/filteredFeatures/DAPI \
			--output-name={wildcards.analysisPath}/exportedGeneFeatureMatices/DAPI \
			--max-cores={params.maxCores} \
			> {output.dapi}
		python /home/rfang/github/merfishdecoder/bin/merfishdecoder export-gene-feature-matrix \
			--data-set-name={params.dataSetName} \
			--barcodes-name={wildcards.analysisPath}/filteredBarcodes/barcodes_polyT_filtered.h5 \
			--features-name={wildcards.analysisPath}/filteredFeatures/polyT \
			--output-name={wildcards.analysisPath}/exportedGeneFeatureMatices/polyT \
			--max-cores={params.maxCores} \
			> {output.poly}
		"""
