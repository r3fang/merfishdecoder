localrules: all, createAnalysis, cleanup

rule all:
	input:
		expand("{analysisPath}/logs/create_analysis.log",
			analysisPath = config["global"]["analysisPath"]),
		
		expand("{analysisPath}/logs/create_mosaic.log",
                        analysisPath = config["global"]["analysisPath"]),
		
		expand("{analysisPath}/logs/extractBarcodes.log",
                        analysisPath = config["global"]["analysisPath"]),

		expand("{analysisPath}/logs/exportBarcodes.log",
			analysisPath = config["global"]["analysisPath"]),

		expand("{analysisPath}/logs/filterBarcodes.log",
			analysisPath = config["global"]["analysisPath"]),
		
		expand("{analysisPath}/logs/extractFeatures_DAPI.log",
                        analysisPath = config["global"]["analysisPath"]),

		expand("{analysisPath}/logs/exportFeatures_DAPI.log",
			analysisPath = config["global"]["analysisPath"]),
		
		expand("{analysisPath}/logs/assignBarcodes_DAPI.log",
                        analysisPath = config["global"]["analysisPath"]),
                
		expand("{analysisPath}/logs/reportAssignedBarcodes_DAPI.log",
                        analysisPath = config["global"]["analysisPath"]),

		expand("{analysisPath}/logs/exportGeneFeatureMatrix_DAPI.log",
			analysisPath = config["global"]["analysisPath"]),
		
		#expand("{analysisPath}/logs/cleanup.log",
		#	analysisPath = config["global"]["analysisPath"])	


rule createAnalysis:
	params:
		md = config["global"]["merfishdecoder"],
		dataSetName = config["global"]["dataSetName"],
		codebookName = config["global"]["codebookName"],
		dataOrganizationName = config["global"]["dataOrganizationName"],
		microscopeParameterName = config["global"]["microscopeParameterName"],
		microscopeChromaticAberrationName = config["global"]["microscopeChromaticAberrationName"],
		positionName = config["global"]["positionName"]

	output:
		log = "{analysisPath}/logs/create_analysis.log"

	shell:
		"""
		python {params.md} create-analysis \
			--data-set-name={params.dataSetName} \
			--codebook-name={params.codebookName} \
			--data-organization-name={params.dataOrganizationName} \
			--microscope-parameter-name={params.microscopeParameterName} \
			--microscope-chromatic-aberration-name={params.microscopeChromaticAberrationName} \
			--position-name={params.positionName} \
			> {output.log}
		"""

rule createMosaic:
        params:
                md = "/home/r3fang_g_harvard_edu/merfishdecoder/merfishdecoder/apps/run_create_mosaic.py",
		dataSetName = config["global"]["dataSetName"],
		featureName = config["mosaic"]["featureName"],
		cropWidth = config["mosaic"]["cropWidth"],
		mosaicMicronsPerPixel = config["mosaic"]["mosaicMicronsPerPixel"],
		zpos = config["mosaic"]["zpos"],
	
	output:
                log = "{analysisPath}/logs/create_mosaic.log",
		file = "{analysisPath}/mosaic.tif",
		file_fov = "{analysisPath}/mosaic_fov.tif",	
	shell:
                """
		python {params.md} \
			{params.dataSetName} \
			{params.featureName} \
			{params.cropWidth} \
			{params.mosaicMicronsPerPixel} \
			{params.zpos} \
			{output.file_fov} \
			True \
			>> {output.log}
		
		python {params.md} \
                        {params.dataSetName} \
                        {params.featureName} \
                        {params.cropWidth} \
                        {params.mosaicMicronsPerPixel} \
                        {params.zpos} \
                        {output.file} \
                        False \
                        >> {output.log}
                """

rule decoding:
	input:
		log  = "{analysisPath}/logs/create_analysis.log",
		file = "{analysisPath}/pixel_score_machine.pkl"

	params:
		dataSetName = config["global"]["dataSetName"],
		md = config["global"]["merfishdecoder_decode"],
		psm = "{analysisPath}/pixel_score_machine.pkl",
		refFrameIndex = config["registration"]["refFrameIndex"],
		highPassFilterSigma = config["registration"]["highPassFilterSigma"],
		borderSize = config["decoding"]["borderSize"],
		magnitudeThreshold = config["decoding"]["magnitudeThreshold"],
		distanceThreshold = config["decoding"]["distanceThreshold"],
		barcodesPerCore = config["extractBarcodes"]["barcodesPerCore"],
		maxCores = 1
		
	output:
		file = "{analysisPath}/extractedBarcodes/fov_{fov}_zpos_{zpos}.h5",
		log  = "{analysisPath}/extractedBarcodes/fov_{fov}_zpos_{zpos}.log"
		
	shell:
		"""
		python {params.md} \
			--data-set-name={params.dataSetName} \
			--fov={wildcards.fov} \
			--zpos={wildcards.zpos} \
			--psm-name={params.psm} \
			--max-cores={params.maxCores} \
			--output-name={output.file} \
			--ref-frame-index={params.refFrameIndex} \
			--high-pass-filter-sigma={params.highPassFilterSigma} \
			--border-size={params.borderSize} \
			--magnitude-threshold={params.magnitudeThreshold} \
			--distance-threshold={params.distanceThreshold} \
			> {output.log}
		"""

rule extractedBarcodeCheck:
        input:
                expand("{analysisPath}/extractedBarcodes/fov_{fov}_zpos_{zpos}.h5",
                        analysisPath = config["global"]["analysisPath"],
                        fov = range(config["global"]["fovs"]),
                        zpos = config["global"]["zposes"])

        output:
                log  = "{analysisPath}/logs/extractBarcodes.log"

        shell:
                """
		date > {output.log}
                """

rule exportBarcodes:
	input:
		"{analysisPath}/logs/extractBarcodes.log"

	params:
		dataSetName = config["global"]["dataSetName"],
		md = config["global"]["merfishdecoder"]

	output:
		file = "{analysisPath}/exportedBarcodes/barcodes.h5",
		log  = "{analysisPath}/logs/exportBarcodes.log"

	shell:
		"""
		python {params.md} export-barcodes \
			--data-set-name={params.dataSetName} \
			--decoded-barcodes-dir extractedBarcodes \
			--output-name={output.file} \
			> {output.log}
		"""

rule filterBarcodes:
	input:
		file = "{analysisPath}/exportedBarcodes/barcodes.h5",
		log = "{analysisPath}/logs/exportBarcodes.log"
	params:
		dataSetName = config["global"]["dataSetName"],
		md = "/home/r3fang_g_harvard_edu/merfishdecoder/merfishdecoder/apps/run_filter_barcodes_fov.py",
		outputDir = "{analysisPath}/filteredBarcodes/",
		fovNum = config["filterBarcodes"]["fovNum"],
		keepBlankBarcodes = config["filterBarcodes"]["keepBlankBarcodes"],
		misIdentificationRate = config["filterBarcodes"]["misIdentificationRate"],
		areaThreshold = config["filterBarcodes"]["areaThreshold"],
		distanceThreshold = config["filterBarcodes"]["distanceThreshold"],
		magnitudeThreshold = config["filterBarcodes"]["magnitudeThreshold"]
	output:
		log  = "{analysisPath}/logs/filterBarcodes.log",
	shell:
		"""
		python {params.md} \
			{params.dataSetName} \
			{input.file} \
			{params.outputDir} \
			{params.fovNum} \
			{params.misIdentificationRate} \
			{params.keepBlankBarcodes} \
			{params.areaThreshold} \
			{params.distanceThreshold} \
			{params.magnitudeThreshold} \
			> {output.log}
		"""

rule segmentation_DAPI:
	input:
		"{analysisPath}/logs/create_analysis.log"

	params:
		dataSetName = config["global"]["dataSetName"],
		md = config["global"]["merfishdecoder_segmentation"],
		featureDiameter = config["segmentation"]["DAPI"]["diameter"],
		featureModelType = config["segmentation"]["DAPI"]["modelType"],
		refFrameIndex = config["registration"]["refFrameIndex"],
		highPassFilterSigma = config["registration"]["highPassFilterSigma"]

	output:
		file = "{analysisPath}/extractedFeatures/DAPI/fov_{fov}_zpos_{zpos}_DAPI.shp",
		log  = "{analysisPath}/extractedFeatures/DAPI/fov_{fov}_zpos_{zpos}_DAPI.log"

	shell:
		"""
		python {params.md} \
			--data-set-name={params.dataSetName} \
			--fov={wildcards.fov} \
			--zpos={wildcards.zpos} \
			--output-name={output.file} \
			--feature-name=DAPI \
			--feature-diameter={params.featureDiameter} \
			--feature-model-type={params.featureModelType} \
			--ref-frame-index={params.refFrameIndex} \
			--high-pass-filter-sigma={params.highPassFilterSigma} \
			> {output.log}
		"""

rule segmentationCheck_DAPI:
	input:
		expand("{analysisPath}/extractedFeatures/DAPI/fov_{fov}_zpos_{zpos}_DAPI.shp",
			analysisPath = config["global"]["analysisPath"],
			fov = range(config["global"]["fovs"]),
			zpos = config["global"]["zposes"])
	output:
		log  = "{analysisPath}/logs/extractFeatures_DAPI.log"
	shell:
		"""
		date > {output.log}
		"""

rule exportFeatures_DAPI:
	input:
		"{analysisPath}/logs/extractFeatures_DAPI.log"
	params:
                dataSetName = config["global"]["dataSetName"],
                bufferSize = config["exportFeatures"]["bufferSize"],
                md = "/home/r3fang_g_harvard_edu/merfishdecoder/merfishdecoder/apps/run_export_features_fov.py",
	output:
                file = "{analysisPath}/exportedFeatures/DAPI/fov_{fov}.shp",
                log  = "{analysisPath}/exportedFeatures/DAPI/fov_{fov}.log",
	shell:
		"""
		python {params.md} \
			{params.dataSetName} \
                        {wildcards.fov} \
                        extractedFeatures/DAPI/ \
                        {output.file} \
                        {params.bufferSize} \
                        > {output.log}
		"""

rule exportFeatureCheck_DAPI:
        input:
                expand("{analysisPath}/exportedFeatures/DAPI/fov_{fov}.shp",
                        analysisPath = config["global"]["analysisPath"],
                        fov = range(config["global"]["fovs"]))
        output:
                log  = "{analysisPath}/logs/exportFeatures_DAPI.log"
        shell:
                """
                date > {output.log}
                """

rule assignBarcodes_DAPI:
	input:
		log1 = "{analysisPath}/logs/filterBarcodes.log",
		log2 = "{analysisPath}/logs/exportFeatures_DAPI.log",
		features = "{analysisPath}/exportedFeatures/DAPI/fov_{fov}.shp",
	params:
		dataSetName = config["global"]["dataSetName"],
		bufferSize = config["assignBarcodes"]["DAPI"]["bufferSize"],
		md = "/home/r3fang_g_harvard_edu/merfishdecoder/merfishdecoder/apps/run_barcode_assignment_fov.py",
	
	output:
		file = "{analysisPath}/assignedBarcodes/DAPI/fov_{fov}.h5",
		log  = "{analysisPath}/assignedBarcodes/DAPI/fov_{fov}.log"
	
	shell:
		"""
		python {params.md} \
			{params.dataSetName} \
			{wildcards.analysisPath}/filteredBarcodes/fov_{wildcards.fov}.h5 \
			{input.features} \
			{wildcards.fov} \
			{output.file} \
			{params.bufferSize} \
			> {output.log}
		"""


rule assignBarcodesCheck_DAPI:
	input: 
		expand("{analysisPath}/assignedBarcodes/DAPI/fov_{fov}.log",
                        analysisPath = config["global"]["analysisPath"],
                        fov = range(config["global"]["fovs"])),
                expand("{analysisPath}/assignedBarcodes/DAPI/fov_{fov}.h5",
                        analysisPath = config["global"]["analysisPath"],
                        fov = range(config["global"]["fovs"])),
	
	output:
		log  = "{analysisPath}/logs/assignBarcodes_DAPI.log"

	shell:
		"""
		date > {output.log}
		"""


rule combineAssignedBarcodes_DAPI:
	input:
		"{analysisPath}/logs/assignBarcodes_DAPI.log"

	params:
		dataSetName = config["global"]["dataSetName"],
		md = "/home/r3fang_g_harvard_edu/merfishdecoder/merfishdecoder/apps/run_combine_barcodes.py",
		inputDir = "{analysisPath}/assignedBarcodes/DAPI/",
	
	output:
		file = "{analysisPath}/assignedBarcodes/barcodes_DAPI.h5",
		log  = "{analysisPath}/logs/reportAssignedBarcodes_DAPI.log"
	
	shell:
		"""
		python {params.md} \
			{params.dataSetName} \
			{params.inputDir} \
			{output.file} \
			> {output.log}
                """

rule combineExportedFeatures_DAPI:
        input:
                expand("{analysisPath}/exportedFeatures/DAPI/fov_{fov}.shp",
                        analysisPath = config["global"]["analysisPath"],
                        fov = range(config["global"]["fovs"]))

        params:
                dataSetName = config["global"]["dataSetName"],
                md = "/home/r3fang_g_harvard_edu/merfishdecoder/merfishdecoder/apps/run_combine_features.py",
                inputDir = "{analysisPath}/exportedFeatures/DAPI/"

        output:
                file = "{analysisPath}/exportedFeatures/DAPI.shp",
                log  = "{analysisPath}/exportedFeatures/DAPI.log"

        shell:
                """
                python {params.md} \
                        {params.dataSetName} \
                        {params.inputDir} \
                        {output.file} \
                        > {output.log}
                """

rule exportGeneFeatureMatrix_DAPI:
	input:
		barcodes  = "{analysisPath}/assignedBarcodes/barcodes_DAPI.h5",
		features  = "{analysisPath}/exportedFeatures/DAPI.shp"

	params:
		dataSetName = config["global"]["dataSetName"],
		md = "/home/r3fang_g_harvard_edu/merfishdecoder/merfishdecoder/apps/run_export_gene_feature_matrix.v2.py",
		maxCores = config["exportGeneFeatureMatrix"]["maxCores"],
		outputName = "{analysisPath}/exportedGeneFeatureMatrices/DAPI",

	output:
		matrix  = "{analysisPath}/exportedGeneFeatureMatrices/DAPI/matrix.mtx",
		feature = "{analysisPath}/exportedGeneFeatureMatrices/DAPI/features.tsv",
		gene    = "{analysisPath}/exportedGeneFeatureMatrices/DAPI/genes.tsv",
		log     = "{analysisPath}/logs/exportGeneFeatureMatrix_DAPI.log" 
	
	shell:
		"""
		python {params.md} \
			{params.dataSetName} \
			{input.barcodes} \
			{input.features} \
			{params.outputName} \
			{params.maxCores} \
			> {output.log}
		"""

rule cleanup:
	input:
		"{analysisPath}/logs/exportGeneFeatureMatrix_DAPI.log"

	log:
		"{analysisPath}/logs/cleanup.log",	
	
	shell:
		"""
		if [ -d {wildcards.analysisPath}/extractedBarcodes/ ]; then rm -r {wildcards.analysisPath}/extractedBarcodes/; fi
		if [ -d {wildcards.analysisPath}/assignedBarcodes/DAPI ]; then rm -r {wildcards.analysisPath}/assignedBarcodes/DAPI; fi
		if [ -d {wildcards.analysisPath}/extractedFeatures/ ]; then rm -r {wildcards.analysisPath}/extractedFeatures/; fi
		if [ -d {wildcards.analysisPath}/exportedFeatures/DAPI ]; then rm -r {wildcards.analysisPath}/exportedFeatures/DAPI; fi
		"""


