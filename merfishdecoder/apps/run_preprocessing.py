import os
import pickle
import pandas as pd
import numpy as np

from merfishdecoder.core import zplane
from merfishdecoder.util import imagefilter
from merfishdecoder.util import preprocessing
from merfishdecoder.util import utilities

def run_job(dataSetName: str = None,
            fov: int = None,
            zpos: float = None,
            warpedImagesName: str = None,
            outputName: str = None,
            highPassFilterSigma: int = 3):

    """
    Preprocessing of MERFISH images prior to decoding:
        1) remove cell background - when highPassFilter is True
        2) normalize magnitude

    Args
    ----
    dataSetName: input dataset name.

    fov: the field of view to be processed.

    zpos: the z position of the selected FOV to be processed. Each
                  z-plane is preprocessed indepedently.

    warpedImagesName: input file that contains the warped image stack
                  generated by registration.

    outputNameFile: outputName npy file name.

    highPassFilterSigma: the size of the gaussian sigma used in the 
                  high pass filter for removing the cell background.
                  highPassFilterSigma is None, high pass filter will
                  not be performed.
    """
    # dataSetName = "MERFISH_test/data"
    # fov = 3
    # zpos = 3.0
    # warpedImagesName = "/mnt/NAS/Fang/Analysis/MERFISH/merfish_analysis/MERFISH_test/data/warpedImages/fov_3_zpos_3.0.tif"
    # outputName = "/mnt/NAS/Fang/Analysis/MERFISH/merfish_analysis/MERFISH_test/data/processedImages/fov_3_zpos_3.0.npz"

    # check points
    utilities.print_checkpoint("Process MERFISH images")
    utilities.print_checkpoint("Start")
    
    # create a zplane object
    zp = zplane.Zplane(dataSetName,
                       fov = fov,
                       zpos = zpos)

    # create the folder
    dirPath = os.path.dirname(outputName)
    os.makedirs(dirPath,
        exist_ok=True)

    # load readout images
    zp.load_warped_images(
        warpedImagesName)
    
    # only kep merfish rounds
    zp.del_frames(
        set(zp.get_readout_name()) - \
        set(zp.get_bit_name()))

    # remove backgroup
    if highPassFilterSigma is not None:
        zp = imagefilter.high_pass_filter(
            obj = zp,
            readoutImage = True,
            fiducialImage = False,
            sigma = highPassFilterSigma)

    # calcualte scale factor
    scaleFactors = preprocessing.estimate_scale_factors(
        obj = zp,
        frameNames = zp.get_readout_name())
            
    # normalize image intensity
    zp = preprocessing.scale_readout_images(
        obj = zp,
        frameNames = zp.get_bit_name(),
        scaleFactors = scaleFactors)

    # save processed images
    np.savez_compressed(
        outputName, 
        zp.get_readout_images())
    
    # save scale factor
    scaleFactors = pd.DataFrame(scaleFactors.items())
    scaleFactors.columns = ["frameName", "value"]
    prefix = os.path.splitext(outputName)[0]
    scaleFactors.to_csv(
        prefix + "_scale_factor.csv",
        header = True,
        index = False)

    # check points
    utilities.print_checkpoint("Done")
    



