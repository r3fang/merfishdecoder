localrules: all, createAnalysis

import random

random.seed(1)
fovs = random.sample(range(config["global"]["fovs"]), min(config["global"]["fovs"], config["trainPSM"]["zposNum"]))
zposes = config["global"]["zposes"]

rule all:
	input:
		expand("{analysisPath}/logs/create_analysis.log", 
			analysisPath = config["global"]["analysisPath"]),

		expand("{analysisPath}/warpedImages/fov_{fov}_zpos_{zpos}.tif", 
			analysisPath = config["global"]["analysisPath"], 
			fov = fovs,
			zpos = zposes),

		expand("{analysisPath}/processedImages/fov_{fov}_zpos_{zpos}.npz", 
			analysisPath = config["global"]["analysisPath"], 
			fov = fovs,
			zpos = zposes),

		expand("{analysisPath}/decodedImages/fov_{fov}_zpos_{zpos}.npz", 
			analysisPath = config["global"]["analysisPath"], 
			fov = fovs,
			zpos = zposes),

		expand("{analysisPath}/pixel_score_machine.pkl",
			analysisPath = config["global"]["analysisPath"])

rule createAnalysis:
	params:
		dataHome = config["global"]["dataHome"],
		md = config["global"]["merfishdecoder"],
		analysisHome = config["global"]["analysisHome"],
		dataSetName = config["global"]["dataSetName"],
		codebookName = config["global"]["codebookName"],
		dataOrganizationName = config["global"]["dataOrganizationName"],
		microscopeParameterName = config["global"]["microscopeParameterName"],
		microscopeChromaticAberrationName = config["global"]["microscopeChromaticAberrationName"],
		positionName = config["global"]["positionName"]

	output:
		"{analysisPath}/logs/create_analysis.log"
	
	shell:
		"""
		python {params.md} create-analysis \
			--data-set-name={params.dataSetName} \
			--codebook-name={params.codebookName} \
			--data-organization-name={params.dataOrganizationName} \
			--microscope-parameter-name={params.microscopeParameterName} \
			--microscope-chromatic-aberration-name={params.microscopeChromaticAberrationName} \
			--position-name={params.positionName} \
			--data-home={params.dataHome} \
			--analysis-home={params.analysisHome} \
			> {output}
		"""

rule registration:
	input:
		"{analysisPath}/logs/create_analysis.log"

	params:
		dataSetName = config["global"]["dataSetName"],
		md = config["global"]["merfishdecoder"],
		registerDrift = config["registration"]["registerDrift"],
		refFrameIndex = config["registration"]["refFrameIndex"],
		highPassFilterSigma = config["registration"]["highPassFilterSigma"],
		registerColor = config["registration"]["registerColor"],
		saveFiducials = config["registration"]["saveFiducials"]

	output:
		file = "{analysisPath}/warpedImages/fov_{fov}_zpos_{zpos}.tif",
		log = "{analysisPath}/logs/fov_{fov}_zpos_{zpos}_registration.log"

	shell:
		"""
		python {params.md} register-images \
			--data-set-name={params.dataSetName} \
			--fov={wildcards.fov} \
			--zpos={wildcards.zpos}  \
			--output-name={output.file} \
			--register-drift={params.registerDrift} \
			--ref-frame-index={params.refFrameIndex} \
			--high-pass-filter-sigma={params.highPassFilterSigma} \
			--register-color={params.registerColor} \
			--save-fiducials={params.saveFiducials} \
			> {output.log}
		"""

rule preprocessing:
	input:
		"{analysisPath}/warpedImages/fov_{fov}_zpos_{zpos}.tif"

	params:
		dataSetName = config["global"]["dataSetName"],
		md = config["global"]["merfishdecoder"],
		highPassFilterSigma = config["pre"]["highPassFilterSigma"]
	
	output:
		file = "{analysisPath}/processedImages/fov_{fov}_zpos_{zpos}.npz",
		log = "{analysisPath}/logs/fov_{fov}_zpos_{zpos}_processing.log"

	shell:
		"""
		python {params.md} process-images \
			--data-set-name={params.dataSetName} \
			--fov={wildcards.fov} --zpos={wildcards.zpos} \
			--warped-images-name={input} \
			--output-name={output.file} \
			--high-pass-filter-sigma={params.highPassFilterSigma} \
			> {output.log}
		"""

rule decoding:
	input:
		"{analysisPath}/processedImages/fov_{fov}_zpos_{zpos}.npz"
	
	params:
		dataSetName = config["global"]["dataSetName"],
		md = config["global"]["merfishdecoder"],
		borderSize = config["decoding"]["borderSize"],
		magnitudeThreshold = config["decoding"]["magnitudeThreshold"],
		distanceThreshold = config["decoding"]["distanceThreshold"]
	
	output:
		file = "{analysisPath}/decodedImages/fov_{fov}_zpos_{zpos}.npz",
		log = "{analysisPath}/logs/fov_{fov}_zpos_{zpos}_decoding.log"
	
	shell:
		"""
		python {params.md} decode-images \
			--data-set-name={params.dataSetName} \
			--fov={wildcards.fov} \
			--zpos={wildcards.zpos} \
			--decoding-images-name={input} \
			--output-name={output.file} \
			--border-size={params.borderSize} \
			--magnitude-threshold={params.magnitudeThreshold} \
			--distance-threshold={params.distanceThreshold} \
			> {output.log}
		"""

rule trainPSM:
	input:
		expand("{analysisPath}/decodedImages/fov_{fov}_zpos_{zpos}.npz", 
			analysisPath = config["global"]["analysisPath"], 
			fov = fovs, 
			zpos = zposes)

	params:
		dataSetName = config["global"]["dataSetName"],
		md = config["global"]["merfishdecoder"],
		zposNum = config["trainPSM"]["zposNum"]
	
	output:
		file = "{analysisPath}/pixel_score_machine.pkl",
		log = "{analysisPath}/logs/train_PSM.log"
	
	shell:
		"""
		python {params.md} train-psm \
			--data-set-name={params.dataSetName} \
			--decoded-images-dir={wildcards.analysisPath}/decodedImages \
			--output-name={output.file} \
			--zpos-num={params.zposNum} \
			> {output.log}
		"""
