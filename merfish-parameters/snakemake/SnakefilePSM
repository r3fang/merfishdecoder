localrules: all, createAnalysis

import numpy as np 
np.random.seed(seed=config["trainPSM"]["seed"])
fovs = np.random.choice(range(config["global"]["fovs"]), config["trainPSM"]["zposNum"], replace = False)
np.random.seed(seed=config["trainPSM"]["seed"])
zposes = np.random.choice(config["global"]["zposes"], config["trainPSM"]["zposNum"], replace = True)

rule all:
	input:
		expand("{analysisPath}/decodedImages/fov_{fov}_zpos_{zpos}.npz", 
			zip, fov=fovs, zpos=zposes, 
			analysisPath = [ config["global"]["analysisPath"] ] * config["trainPSM"]["zposNum"]),
		
		"{analysisPath}/pixel_score_machine.pkl".format(
			analysisPath=config["global"]["analysisPath"])

rule createAnalysis:
	params:
		md = config["global"]["merfishdecoder"],
		dataSetName = config["global"]["dataSetName"],
		codebookName = config["global"]["codebookName"],
		dataOrganizationName = config["global"]["dataOrganizationName"],
		microscopeParameterName = config["global"]["microscopeParameterName"],
		microscopeChromaticAberrationName = config["global"]["microscopeChromaticAberrationName"],
		positionName = config["global"]["positionName"]

	output:
		log = "{analysisPath}/logs/create_analysis.log"

	shell:
		"""
		python {params.md} create-analysis \
			--data-set-name={params.dataSetName} \
			--codebook-name={params.codebookName} \
			--data-organization-name={params.dataOrganizationName} \
			--microscope-parameter-name={params.microscopeParameterName} \
			--microscope-chromatic-aberration-name={params.microscopeChromaticAberrationName} \
			--position-name={params.positionName} \
			> {output.log}
		"""

rule registration:
	input:
		"{analysisPath}/logs/create_analysis.log"
	
	params:
		dataSetName = config["global"]["dataSetName"],
		md = config["global"]["merfishdecoder"],
		registerDrift = config["registration"]["registerDrift"],
		refFrameIndex = config["registration"]["refFrameIndex"],
		highPassFilterSigma = config["registration"]["highPassFilterSigma"],
		registerColor = config["registration"]["registerColor"],
		saveFiducials = config["registration"]["saveFiducials"]
		
	output:
		file = "{analysisPath}/warpedImages/fov_{fov}_zpos_{zpos}.tif",
		log = "{analysisPath}/warpedImages/fov_{fov}_zpos_{zpos}.log"
	
	shell:
		"""
		python {params.md} register-images \
			--data-set-name={params.dataSetName} \
			--fov={wildcards.fov} \
			--zpos={wildcards.zpos}  \
			--output-name={output.file} \
			--register-drift={params.registerDrift} \
			--ref-frame-index={params.refFrameIndex} \
			--high-pass-filter-sigma={params.highPassFilterSigma} \
			--register-color={params.registerColor} \
			--save-fiducials={params.saveFiducials} \
			> {output.log}
		"""

rule preprocessing:
	input:
		file = "{analysisPath}/warpedImages/fov_{fov}_zpos_{zpos}.tif",
		log  = "{analysisPath}/warpedImages/fov_{fov}_zpos_{zpos}.log"

	params:
		dataSetName = config["global"]["dataSetName"],
		md = config["global"]["merfishdecoder"],
		highPassFilterSigma = config["pre"]["highPassFilterSigma"]

	output:
		file = "{analysisPath}/processedImages/fov_{fov}_zpos_{zpos}.npz",
		log  = "{analysisPath}/processedImages/fov_{fov}_zpos_{zpos}.log"

	shell:
		"""
		python {params.md} process-images \
			--data-set-name={params.dataSetName} \
			--fov={wildcards.fov} \
			--zpos={wildcards.zpos} \
			--warped-images-name={input.file} \
			--output-name={output.file} \
			--high-pass-filter-sigma={params.highPassFilterSigma} \
			> {output.log}
		"""

rule decoding:
	input:
		file = "{analysisPath}/processedImages/fov_{fov}_zpos_{zpos}.npz",
		log  = "{analysisPath}/processedImages/fov_{fov}_zpos_{zpos}.log"
		
	params:
		dataSetName = config["global"]["dataSetName"],
		md = config["global"]["merfishdecoder"],
		borderSize = config["decoding"]["borderSize"],
		magnitudeThreshold = config["decoding"]["magnitudeThreshold"],
		distanceThreshold = config["decoding"]["distanceThreshold"],
		maxCores = 1
		
	output:
		file = "{analysisPath}/decodedImages/fov_{fov}_zpos_{zpos}.npz",
		log  = "{analysisPath}/decodedImages/fov_{fov}_zpos_{zpos}.log"

	shell:
		"""
		python {params.md} decode-images \
			--data-set-name={params.dataSetName} \
			--fov={wildcards.fov} \
			--zpos={wildcards.zpos} \
			--decoding-images-name={input.file}  \
			--output-name={output.file}  \
			--border-size={params.borderSize} \
			--magnitude-threshold={params.magnitudeThreshold} \
			--distance-threshold={params.distanceThreshold} \
			--max-cores={params.maxCores} \
			> {output.log}
		"""

rule trainPSM:
	input:
		expand("{analysisPath}/decodedImages/fov_{fov}_zpos_{zpos}.npz", 
			zip, fov=fovs, zpos=zposes, 
			analysisPath = [ config["global"]["analysisPath"] ] * config["trainPSM"]["zposNum"]),

	params:
		dataSetName = config["global"]["dataSetName"],
		md = config["global"]["merfishdecoder"],
		zposNum = config["trainPSM"]["zposNum"]

	output:
		file = "{analysisPath}/pixel_score_machine.pkl",
		log = "{analysisPath}/logs/train_PSM.log"

	shell:
		"""
		python {params.md} train-psm \
			--data-set-name={params.dataSetName} \
			--decoded-images-dir={wildcards.analysisPath}/decodedImages/ \
			--output-name={output.file} \
			--zpos-num={params.zposNum} \
			> {output.log}
		"""

