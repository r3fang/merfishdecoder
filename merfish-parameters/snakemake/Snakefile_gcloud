localrules: all, createAnalysis

rule all:
	input:
		expand("{analysisPath}/logs/create_analysis.log", 
			analysisPath = config["global"]["analysisPath"]),

		expand("{analysisPath}/extractedBarcodes/fov_{fov}_zpos_{zpos}.h5", 
			analysisPath = config["global"]["analysisPath"], 
			fov = range(config["global"]["fovs"]),
			zpos = config["global"]["zposes"]),

		expand("{analysisPath}/extractedFeatures/fov_{fov}_zpos_{zpos}_DAPI.shp", 
			analysisPath = config["global"]["analysisPath"], 
			fov = range(config["global"]["fovs"]),
			zpos = config["global"]["zposes"]),

		expand("{analysisPath}/extractedFeatures/fov_{fov}_zpos_{zpos}_polyT.shp", 
			analysisPath = config["global"]["analysisPath"], 
			fov = range(config["global"]["fovs"]),
			zpos = config["global"]["zposes"]),

		expand("{analysisPath}/exportedBarcodes/barcodes.h5", 
			analysisPath = config["global"]["analysisPath"]),

		expand("{analysisPath}/filteredBarcodes/barcodes.h5", 
			analysisPath = config["global"]["analysisPath"]),

		expand("{analysisPath}/exportedFeatures/DAPI.shp", 
			analysisPath = config["global"]["analysisPath"]),

		expand("{analysisPath}/exportedFeatures/polyT.shp", 
			analysisPath = config["global"]["analysisPath"]),

		expand("{analysisPath}/filteredFeatures/DAPI.shp", 
			analysisPath = config["global"]["analysisPath"]),

		expand("{analysisPath}/filteredFeatures/polyT.shp", 
			analysisPath = config["global"]["analysisPath"]),

		expand("{analysisPath}/assignedBarcodes/barcodes_DAPI.h5", 
			analysisPath = config["global"]["analysisPath"]),

		expand("{analysisPath}/assignedBarcodes/barcodes_polyT.h5", 
			analysisPath = config["global"]["analysisPath"]),

		expand("{analysisPath}/filteredBarcodes/barcodes_DAPI.h5", 
			analysisPath = config["global"]["analysisPath"]),

		expand("{analysisPath}/filteredBarcodes/barcodes_polyT.h5", 
			analysisPath = config["global"]["analysisPath"]),

		expand("{analysisPath}/exportedGeneFeatureMatrices/DAPI/matrix.mtx", 
			analysisPath = config["global"]["analysisPath"]),

		"{analysisPath}/exportedGeneFeatureMatrices/polyT/matrix.mtx".format(
			analysisPath = config["global"]["analysisPath"]),

		"{analysisPath}/exportedGeneFeatureMatrices/polyT/features.tsv".format(
			analysisPath = config["global"]["analysisPath"]),

		"{analysisPath}/exportedGeneFeatureMatrices/polyT/genes.tsv".format(
			analysisPath = config["global"]["analysisPath"]),

		"{analysisPath}/exportedGeneFeatureMatrices/DAPI/matrix.mtx".format(
			analysisPath = config["global"]["analysisPath"]),

		"{analysisPath}/exportedGeneFeatureMatrices/DAPI/features.tsv".format(
			analysisPath = config["global"]["analysisPath"]),

		"{analysisPath}/exportedGeneFeatureMatrices/DAPI/genes.tsv".format(
			analysisPath = config["global"]["analysisPath"])

rule createAnalysis:
	params:
		dataHome = config["global"]["dataHome"],
		md = config["global"]["merfishdecoder"],
		analysisHome = config["global"]["analysisHome"],
		dataSetName = config["global"]["dataSetName"],
		codebookName = config["global"]["codebookName"],
		dataOrganizationName = config["global"]["dataOrganizationName"],
		microscopeParameterName = config["global"]["microscopeParameterName"],
		microscopeChromaticAberrationName = config["global"]["microscopeChromaticAberrationName"],
		positionName = config["global"]["positionName"]
	
	output:
		"{analysisPath}/logs/create_analysis.log"
	
	shell:
		"""
		python {params.md} create-analysis \
			--data-set-name={params.dataSetName} \
			--codebook-name={params.codebookName} \
			--data-organization-name={params.dataOrganizationName} \
			--microscope-parameter-name={params.microscopeParameterName} \
			--microscope-chromatic-aberration-name={params.microscopeChromaticAberrationName} \
			--position-name={params.positionName} \
			--data-home={params.dataHome} \
			--analysis-home={params.analysisHome} \
			> {output}
		"""

rule decoding:
	input:
		"{analysisPath}/logs/create_analysis.log"

	params:
		dataSetName = config["global"]["dataSetName"],
		md = config["global"]["merfishdecoder_gcloud"],
		psm = "/home/rfang/merfish-analysis/20200303_hMTG_V11_4000gene_best_sample/data/pixel_score_machine.pkl",
		maxCores = 1

	output:
		barcodes = "{analysisPath}/extractedBarcodes/fov_{fov}_zpos_{zpos}.h5",
		DAPI     = "{analysisPath}/extractedFeatures/fov_{fov}_zpos_{zpos}_DAPI.shp",
		polyT    = "{analysisPath}/extractedFeatures/fov_{fov}_zpos_{zpos}_polyT.shp",
		log      = "{analysisPath}/logs/fov_{fov}_zpos_{zpos}.log"

	shell:
		"""
		python {params.md} \
			--data-set-name={params.dataSetName} \
			--fov={wildcards.fov} \
			--zpos={wildcards.zpos} \
			--psm-name={params.psm} \
			--max-cores={params.maxCores} \
			> {output.log}
		"""

rule exportBarcodes:
	input:
		expand("{analysisPath}/extractedBarcodes/fov_{fov}_zpos_{zpos}.h5",
			analysisPath = config["global"]["analysisPath"],
			fov = range(config["global"]["fovs"]),
			zpos = config["global"]["zposes"])

	params:
		dataSetName = config["global"]["dataSetName"],
		md = config["global"]["merfishdecoder"]

	output:
		file = "{analysisPath}/exportedBarcodes/barcodes.h5",
		log = "{analysisPath}/logs/exportedBarcodes.log"

	shell:
		"""
		python {params.md} export-barcodes \
			--data-set-name={params.dataSetName} \
			--decoded-barcodes-dir extractedBarcodes \
			--output-name={output.file} \
			> {output.log}
		"""

rule filterBarcodes:
	input:
		"{analysisPath}/exportedBarcodes/barcodes.h5"

	params:
		dataSetName = config["global"]["dataSetName"],
		md = config["global"]["merfishdecoder"],
		fovNum = config["filterBarcodes"]["fovNum"],
		keepBlankBarcodes = config["filterBarcodes"]["keepBlankBarcodes"],
		misIdentificationRate = config["filterBarcodes"]["misIdentificationRate"],
		minAreaSize = config["filterBarcodes"]["minAreaSize"]

	output:
		file = "{analysisPath}/filteredBarcodes/barcodes.h5",
		log = "{analysisPath}/logs/filteredBarcodes.log"

	shell:
		"""
		python {params.md} filter-barcodes \
			--data-set-name={params.dataSetName} \
			--exported-barcodes-name={input} \
			--output-name={output.file} \
			--fov-num={params.fovNum} \
			--keep-blank-barcodes={params.keepBlankBarcodes} \
			--mis-identification-rate={params.misIdentificationRate} \
			--min-area-size={params.minAreaSize} \
			> {output.log}
		"""

rule exportFeatures_DAPI:
	input:
		expand("{analysisPath}/extractedFeatures/fov_{fov}_zpos_{zpos}_DAPI.shp",
			analysisPath = config["global"]["analysisPath"],
			fov = range(config["global"]["fovs"]),
			zpos = config["global"]["zposes"])
	params:
		dataSetName = config["global"]["dataSetName"],
		bufferSize = config["exportFeatures"]["bufferSize"],
		md = config["global"]["merfishdecoder"]

	output:
		file = "{analysisPath}/exportedFeatures/DAPI.shp",
		log = "{analysisPath}/logs/export_feature_DAPI.log"
	
	shell:
		"""
		python {params.md} export-features \
		        --data-set-name={params.dataSetName} \
		        --segmented-features-name {input} \
		        --output-name={output.file} \
		        --buffer-size={params.bufferSize} \
		        > {output.log}
		"""

rule exportFeatures_ployT:
	input:
		expand("{analysisPath}/extractedFeatures/fov_{fov}_zpos_{zpos}_polyT.shp",
			analysisPath = config["global"]["analysisPath"],
			fov = range(config["global"]["fovs"]),
			zpos = config["global"]["zposes"])

	params:
		dataSetName = config["global"]["dataSetName"],
		bufferSize = config["exportFeatures"]["bufferSize"],
		md = config["global"]["merfishdecoder"]

	output:
		file = "{analysisPath}/exportedFeatures/polyT.shp",
		log = "{analysisPath}/logs/export_feature_polyT.log"
	
	shell:
		"""
		python {params.md} export-features \
		        --data-set-name={params.dataSetName} \
		        --segmented-features-name {input} \
		        --output-name={output.file} \
		        --buffer-size={params.bufferSize} \
		        > {output.log}
		"""

rule filterFeatures:
	input:
		polyT = "{analysisPath}/exportedFeatures/polyT.shp",
		DAPI = "{analysisPath}/exportedFeatures/DAPI.shp"

	params:
		dataSetName = config["global"]["dataSetName"],
		borderSize = config["filterFeatures"]["borderSize"],
		minZplane = config["filterFeatures"]["minZplane"],
		md = config["global"]["merfishdecoder"]

	output:
		file_DAPI  = "{analysisPath}/filteredFeatures/DAPI.shp",
		file_polyT = "{analysisPath}/filteredFeatures/polyT.shp",
		log_DAPI  = "{analysisPath}/logs/filter_features_DAPI.log",
		log_polyT = "{analysisPath}/logs/filter_features_polyT.log"

	shell:
		"""
		python {params.md} filter-features \
			--data-set-name={params.dataSetName} \
			--exported-features-name={input.DAPI} \
			--output-name={output.file_DAPI} \
			--border-size={params.borderSize} \
			--min-zplane={params.minZplane} \
			> {output.log_DAPI}
		python {params.md} filter-features \
			--data-set-name={params.dataSetName} \
			--exported-features-name={input.polyT} \
			--output-name={output.file_polyT} \
			--border-size={params.borderSize} \
			--min-zplane={params.minZplane} \
			> {output.log_polyT}
		"""

rule assignBarcodes_DAPI:
	input:
		features = "{analysisPath}/filteredFeatures/DAPI.shp",
		barcodes = "{analysisPath}/filteredBarcodes/barcodes.h5"
	
	params:
		dataSetName = config["global"]["dataSetName"],
		md = config["global"]["merfishdecoder"],
		maxCores = config["assignBarcodes"]["DAPI"]["maxCores"],
		bufferSize = config["assignBarcodes"]["DAPI"]["bufferSize"]

	output:
		file = "{analysisPath}/assignedBarcodes/barcodes_DAPI.h5",		
		log  = "{analysisPath}/logs/assign_barcodes_DAPI.log"
	
	shell:
		"""
		python {params.md} assign-barcodes \
		        --data-set-name={params.dataSetName} \
		        --exported-barcodes-name={input.barcodes} \
		        --exported-features-name={input.features} \
		        --output-name={output.file} \
		        --max-cores={params.maxCores} \
		        --buffer-size={params.bufferSize}
		        > {output.log}
		"""

rule assignBarcodes_polyT:
	input:
		features = "{analysisPath}/filteredFeatures/polyT.shp",
		barcodes = "{analysisPath}/filteredBarcodes/barcodes.h5"
	
	params:
		dataSetName = config["global"]["dataSetName"],
		md = config["global"]["merfishdecoder"],
		maxCores = config["assignBarcodes"]["DAPI"]["maxCores"],
		bufferSize = config["assignBarcodes"]["DAPI"]["bufferSize"]

	output:
		file = "{analysisPath}/assignedBarcodes/barcodes_polyT.h5",		
		log  = "{analysisPath}/logs/assign_barcodes_polyT.log"
	
	shell:
		"""
		python {params.md} assign-barcodes \
		        --data-set-name={params.dataSetName} \
		        --exported-barcodes-name={input.barcodes} \
		        --exported-features-name={input.features} \
		        --output-name={output.file} \
		        --max-cores={params.maxCores} \
		        --buffer-size={params.bufferSize}
		        > {output.log}
		"""

rule filterBarcodesFeature:
	input:
		polyT = "{analysisPath}/assignedBarcodes/barcodes_polyT.h5",
		DAPI = "{analysisPath}/assignedBarcodes/barcodes_DAPI.h5"
	
	params:
		dataSetName = config["global"]["dataSetName"],
		fovNum = config["filterBarcodes"]["fovNum"],
		md = config["global"]["merfishdecoder"],
		keepBlankBarcodes = config["filterBarcodes"]["keepBlankBarcodes"],
		misIdentificationRate = config["filterBarcodes"]["misIdentificationRate"],
		minAreaSize = config["filterBarcodes"]["minAreaSize"]
	
	output:
		file_polyT = "{analysisPath}/filteredBarcodes/barcodes_polyT.h5",
		file_DAPI  = "{analysisPath}/filteredBarcodes/barcodes_DAPI.h5",
		log_polyT  = "{analysisPath}/logs/filter_barcodes_polyT.log",
		log_DAPI   = "{analysisPath}/logs/filter_barcodes_DAPI.log"
	
	shell:
		"""
		python {params.md} filter-barcodes \
		        --data-set-name={params.dataSetName} \
		        --exported-barcodes-name={input.DAPI} \
		        --output-name={output.file_DAPI} \
		        --fov-num={params.fovNum} \
		        --keep-blank-barcodes={params.keepBlankBarcodes} \
		        --mis-identification-rate={params.misIdentificationRate} \
		        --min-area-size={params.minAreaSize} \
		        > {output.log_DAPI}
		python {params.md} filter-barcodes \
		        --data-set-name={params.dataSetName} \
		        --exported-barcodes-name={input.polyT} \
		        --output-name={output.file_polyT} \
		        --fov-num={params.fovNum} \
		        --keep-blank-barcodes={params.keepBlankBarcodes} \
		        --mis-identification-rate={params.misIdentificationRate} \
		        --min-area-size={params.minAreaSize} \
		        > {output.log_polyT}
		"""

rule exportGeneFeatureMatrix_DAPI:
	input:
		barcodes = "{analysisPath}/filteredBarcodes/barcodes_DAPI.h5",
		features = "{analysisPath}/exportedFeatures/DAPI.shp"
	
	params:
		dataSetName = config["global"]["dataSetName"],
		md = config["global"]["merfishdecoder"],
		maxCores = config["exportGeneFeatureMatrix"]["maxCores"]

	output:
		fileMtx = "{analysisPath}/exportedGeneFeatureMatrices/DAPI/matrix.mtx",
		fileGene = "{analysisPath}/exportedGeneFeatureMatrices/DAPI/genes.tsv",
		filefeature = "{analysisPath}/exportedGeneFeatureMatrices/DAPI/features.tsv",
		log = "{analysisPath}/logs/exportGeneFeatureMatrix_DAPI.log"

	shell:
		"""
		python {params.md} export-gene-feature-matrix \
		        --data-set-name={params.dataSetName} \
		        --barcodes-name={input.barcodes} \
		        --features-name={input.features} \
		        --output-name={wildcards.analysisPath}/exportedGeneFeatureMatrices/DAPI \
				--max-cores={params.maxCores} \
				> {output.log}
		"""

rule exportGeneFeatureMatrix_polyT:
	input:
		barcodes = "{analysisPath}/filteredBarcodes/barcodes_polyT.h5",
		features = "{analysisPath}/exportedFeatures/polyT.shp"
	
	params:
		dataSetName = config["global"]["dataSetName"],
		md = config["global"]["merfishdecoder"],
		maxCores = config["exportGeneFeatureMatrix"]["maxCores"]

	output:
		fileMtx = "{analysisPath}/exportedGeneFeatureMatrices/polyT/matrix.mtx",
		fileGene = "{analysisPath}/exportedGeneFeatureMatrices/polyT/genes.tsv",
		filefeature = "{analysisPath}/exportedGeneFeatureMatrices/polyT/features.tsv",
		log = "{analysisPath}/logs/exportGeneFeatureMatrix_ployT.log"

	shell:
		"""
		python {params.md} export-gene-feature-matrix \
		        --data-set-name={params.dataSetName} \
		        --barcodes-name={input.barcodes} \
		        --features-name={input.features} \
		        --output-name={wildcards.analysisPath}/exportedGeneFeatureMatrices/polyT \
				--max-cores={params.maxCores} \
				> {output.log}
		"""
