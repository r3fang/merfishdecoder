{
    "analysis_tasks": [
        {
            "task": "SimpleGlobalAlignment",
            "module": "merlin.analysis.globalalign"
        },
        {
            "task": "FiducialCorrelationWarp",
            "module": "merlin.analysis.warp",
            "parameters": {
                "write_fiducial_images": true,
                "highpass_sigma": 10
            }
        },
        {
            "task": "DeconvolutionPreprocess",
            "module": "merlin.analysis.preprocess",
            "parameters": {
                "warp_task": "FiducialCorrelationWarp",
                "highpass_sigma": 3,
                "decon_sigma": 2,
                "decon_iterations": 20,
                "decon_filter_size": 9
            }
        },       
		{
            "task": "OptimizeIteration",
            "module": "merlin.analysis.optimize",
            "analysis_name": "Optimize1",
            "parameters": {
                "preprocess_task": "DeconvolutionPreprocess",
                "warp_task": "FiducialCorrelationWarp",
                "area_threshold": 5,
                "fov_per_iteration": 5,
                "optimize_chromatic_correction": false
            }
        },
        {
            "task": "Decode",
            "module": "merlin.analysis.decode",
            "parameters": {
                "preprocess_task": "DeconvolutionPreprocess",
                "optimize_task": "Optimize1",
                "global_align_task": "SimpleGlobalAlignment",
                "minimum_area": 1,
                "lowpass_sigma": 1,
                "crop_width": 80,
				"distance_threshold":0.51764
            }
        },
        {
            "task": "GenerateAdaptiveThreshold",
            "module": "merlin.analysis.filterbarcodes",
            "parameters": {
                "decode_task": "Decode",
                "run_after_task": "Optimize1"
            }
        },
        {
            "task": "AdaptiveFilterBarcodes",
            "module": "merlin.analysis.filterbarcodes",
            "parameters": {
                "decode_task": "Decode",
                "adaptive_task": "GenerateAdaptiveThreshold",
                "misidentification_rate": 0.05
            }
        },
        {
            "task": "ExportBarcodes",
            "module": "merlin.analysis.exportbarcodes",
            "analysis_name": "ExportBarcodesAdaptive",
            "parameters": {
                "filter_task": "AdaptiveFilterBarcodes",
                "columns": ["barcode_id", "global_x", "global_y", "global_z",
                    "x", "y", "fov", "area"]
            }
        }
    ]
}
